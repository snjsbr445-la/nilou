# ‡¶è‡¶á ‡¶∏‡¶Æ‡ßç‡¶™‡ßÇ‡¶∞‡ßç‡¶£ ‡¶ï‡ßã‡¶°‡¶ü‡¶ø main.py ‡¶´‡¶æ‡¶á‡¶≤‡ßá ‡¶™‡ßá‡¶∏‡ßç‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶® (‡ßß ‡¶ú‡¶® ‡¶ï‡¶∞‡ßç‡¶Æ‡ßÄ ‡¶∏‡¶π ‡¶∏‡ßç‡¶•‡¶ø‡¶§‡¶ø‡¶∂‡ßÄ‡¶≤ ‡¶Ü‡¶∞‡ßç‡¶ï‡¶ø‡¶ü‡ßá‡¶ï‡¶ö‡¶æ‡¶∞)

from keep_alive import keep_alive
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from threading import Thread
from queue import Queue
import time
import logging
import traceback
import requests
import html
import re
from datetime import datetime
import pytz
import os

# --- ‡¶ï‡¶®‡¶´‡¶ø‡¶ó‡¶æ‡¶∞‡ßá‡¶∂‡¶® (Configuration) ---
NUM_COLLECTOR_WORKERS = 1 # Render ‡¶´‡ßç‡¶∞‡¶ø ‡¶™‡ßç‡¶≤‡ßç‡¶Ø‡¶æ‡¶®‡ßá ‡ß®‡ß™/‡ß≠ ‡¶∏‡ßç‡¶•‡¶ø‡¶§‡¶ø‡¶∂‡ßÄ‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶ö‡¶æ‡¶≤‡¶æ‡¶®‡ßã‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡ßß ‡¶ú‡¶® ‡¶ï‡¶∞‡ßç‡¶Æ‡ßÄ ‡¶∏‡ßá‡¶∞‡¶æ‡•§
NUM_SENDER_WORKERS = 5    # ‡ß´ ‡¶ú‡¶® ‡¶™‡ßç‡¶∞‡ßá‡¶∞‡¶ï OTP ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶™‡ßç‡¶∞‡¶∏‡ßç‡¶§‡ßÅ‡¶§ ‡¶•‡¶æ‡¶ï‡¶¨‡ßá‡•§

# --- ‡¶¨‡ßç‡¶Ø‡¶ï‡ßç‡¶§‡¶ø‡¶ó‡¶§ ‡¶§‡¶•‡ßç‡¶Ø ---
IVASMS_EMAIL = "niloyg822@gmail.com"
IVASMS_PASSWORD = "N81234567"
TELEGRAM_TOKEN = "7549134101:AAFtBzB1gJ1hXj18zHLVTXQvtM3gZlkOvpw"
TELEGRAM_CHAT_ID = "-1002819267399"
ADMIN_USER_ID = 7052442701

# --- ‡¶≤‡¶ó‡¶ø‡¶Ç ‡¶ï‡¶®‡¶´‡¶ø‡¶ó‡¶æ‡¶∞‡ßá‡¶∂‡¶® ---
log_level = os.environ.get('LOG_LEVEL', 'WARNING').upper()
logging.basicConfig(level=log_level, format="%(asctime)s - %(name)s - %(levelname)s - %(message)s")

# --- ‡¶∂‡ßá‡ßü‡¶æ‡¶∞‡¶° ‡¶∞‡¶ø‡¶∏‡ßã‡¶∞‡ßç‡¶∏ (‡¶∏‡¶¨ ‡¶•‡ßç‡¶∞‡ßá‡¶° ‡¶è‡¶ó‡ßÅ‡¶≤‡ßã ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶¨‡ßá) ---
otp_queue = Queue()
sent_messages = set() # ‡¶∏‡¶¨ ‡¶ï‡¶∞‡ßç‡¶Æ‡ßÄ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶è‡¶ï‡¶ü‡¶ø‡¶á "‡¶∏‡ßç‡¶Æ‡ßÉ‡¶§‡¶ø"

def send_to_telegram(message, chat_id):
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
    payload = {"chat_id": chat_id, "text": message, "parse_mode": "HTML", "disable_web_page_preview": True}
    try:
        response = requests.post(url, json=payload, timeout=10)
        if response.status_code != 200:
            logging.error(f"‡¶ü‡ßá‡¶≤‡¶ø‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ‡ßá ‡¶¨‡¶æ‡¶∞‡ßç‡¶§‡¶æ ‡¶™‡¶æ‡¶†‡¶æ‡¶§‡ßá ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶• (‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏ ‡¶ï‡ßã‡¶°: {response.status_code}): {response.text}")
    except Exception as e:
        logging.error(f"‡¶ü‡ßá‡¶≤‡¶ø‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ‡ßá ‡¶¨‡¶æ‡¶∞‡ßç‡¶§‡¶æ ‡¶™‡¶æ‡¶†‡¶æ‡¶§‡ßá ‡¶ó‡¶ø‡ßü‡ßá ‡¶®‡ßá‡¶ü‡¶ì‡ßü‡¶æ‡¶∞‡ßç‡¶ï ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ: {e}")

def create_driver():
    chrome_options = Options()
    chrome_options.add_argument("--headless")
    chrome_options.add_argument("--no-sandbox")
    chrome_options.add_argument("--disable-dev-shm-usage")
    driver = webdriver.Chrome(options=chrome_options)
    return driver

def otp_collector(worker_id):
    logger = logging.getLogger(f"Collector-{worker_id}")
    logger.warning("‡¶ï‡¶∞‡ßç‡¶Æ‡ßÄ ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶π‡¶ö‡ßç‡¶õ‡ßá...")
    driver = None
    try:
        driver = create_driver()
        driver.get("https://www.ivasms.com/login")
        driver.find_element(By.NAME, "email").send_keys(IVASMS_EMAIL)
        driver.find_element(By.NAME, "password").send_keys(IVASMS_PASSWORD)
        driver.find_element(By.TAG_NAME, "button").click()
        time.sleep(5) 

        if "login" in driver.current_url:
            raise Exception("‡¶≤‡¶ó‡¶á‡¶® ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶•‡•§")
        
        logger.warning("‡¶ï‡¶∞‡ßç‡¶Æ‡ßÄ ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶≤‡¶ó‡¶á‡¶® ‡¶ï‡¶∞‡ßá‡¶õ‡ßá‡•§")
        driver.get("https://www.ivasms.com/portal/live/my_sms")

        while True:
            all_rows = driver.find_elements(By.CSS_SELECTOR, "tbody > tr")
            for row in reversed(all_rows):
                try:
                    message_content = row.find_elements(By.TAG_NAME, "td")[4].text.strip()
                    if message_content and message_content not in sent_messages:
                        sent_messages.add(message_content)
                        number_details = row.find_elements(By.TAG_NAME, "td")[0].text.strip().split('\n')
                        number = number_details[1] if len(number_details) > 1 else "N/A"
                        service_name = row.find_elements(By.TAG_NAME, "td")[1].text.strip()
                        otp_queue.put({"number": number, "service": service_name, "message": message_content})
                except Exception:
                    continue
            time.sleep(0.05)

    except Exception as e:
        logger.critical(f"‡¶ï‡¶∞‡ßç‡¶Æ‡ßÄ ‡¶è‡¶ï‡¶ü‡¶ø ‡¶Æ‡¶æ‡¶∞‡¶æ‡¶§‡ßç‡¶Æ‡¶ï ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø‡¶∞ ‡¶ï‡¶æ‡¶∞‡¶£‡ßá ‡¶¨‡¶®‡ßç‡¶ß ‡¶π‡ßü‡ßá ‡¶ó‡ßá‡¶õ‡ßá: {e}", exc_info=True)
        send_to_telegram(f"üêû <b>‡¶è‡¶ï‡¶ú‡¶® ‡¶ï‡¶æ‡¶≤‡ßá‡¶ï‡ßç‡¶ü‡¶∞ ‡¶ï‡¶∞‡ßç‡¶Æ‡ßÄ ({worker_id}) ‡¶ï‡ßç‡¶∞‡ßç‡¶Ø‡¶æ‡¶∂ ‡¶ï‡¶∞‡ßá‡¶õ‡ßá!</b>\n\n<b>‡¶ï‡¶æ‡¶∞‡¶£:</b>\n<code>{e}</code>", ADMIN_USER_ID)
    finally:
        if driver:
            driver.quit()
        logger.warning("‡¶ï‡¶∞‡ßç‡¶Æ‡ßÄ ‡¶¨‡¶®‡ßç‡¶ß ‡¶π‡ßü‡ßá ‡¶ó‡ßá‡¶õ‡ßá‡•§")

def telegram_sender():
    while True:
        item = otp_queue.get()
        try:
            message_content = item["message"]
            otp_code_match = re.search(r'\b\d{4,8}\b', message_content)
            otp_code = otp_code_match.group(0) if otp_code_match else "N/A"
            tz = pytz.timezone('Asia/Dhaka')
            current_time = datetime.now(tz).strftime('%d/%m/%Y, %I:%M:%S %p')
            escaped_message = html.escape(message_content)
            formatted_msg = (
                f"‚ú® <b>OTP Received</b> ‚ú®\n\n"
                f"‚è∞ <b>Time:</b> {current_time}\n"
                f"üìû <b>Number:</b> <code>{item['number']}</code>\n"
                f"üîß <b>Service:</b> <code>{item['service']}</code>\n"
                f"üîë <b>OTP Code:</b> <code>{otp_code}</code>\n\n"
                f"<blockquote>{escaped_message}</blockquote>"
            )
            send_to_telegram(formatted_msg, TELEGRAM_CHAT_ID)
        except Exception as e:
            logging.error(f"‡¶ü‡ßá‡¶≤‡¶ø‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ‡ßá ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶™‡¶æ‡¶†‡¶æ‡¶§‡ßá ‡¶ó‡¶ø‡ßü‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ: {e}")
        finally:
            otp_queue.task_done()

def start_bot():
    logging.warning("‡¶Æ‡ßÇ‡¶≤ ‡¶¨‡¶ü ‡¶∏‡¶ø‡¶∏‡ßç‡¶ü‡ßá‡¶Æ ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶π‡¶ö‡ßç‡¶õ‡ßá...")
    send_to_telegram("‚úÖ <b>‡¶¨‡¶ü ‡¶∏‡¶ø‡¶∏‡ßç‡¶ü‡ßá‡¶Æ ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶π‡¶ö‡ßç‡¶õ‡ßá ‡¶è‡¶¨‡¶Ç ‡¶ï‡¶∞‡ßç‡¶Æ‡ßÄ‡¶∞‡¶æ ‡¶™‡ßç‡¶∞‡¶∏‡ßç‡¶§‡ßÅ‡¶§ ‡¶π‡¶ö‡ßç‡¶õ‡ßá...</b>", ADMIN_USER_ID)

    for i in range(NUM_SENDER_WORKERS):
        sender_thread = Thread(target=telegram_sender, daemon=True)
        sender_thread.start()
    
    collector_thread = Thread(target=otp_collector, args=(1,), daemon=True)
    collector_thread.start()
    
    send_to_telegram(f"‚úÖ <b>‡¶∏‡¶ø‡¶∏‡ßç‡¶ü‡ßá‡¶Æ ‡¶∏‡¶Æ‡ßç‡¶™‡ßÇ‡¶∞‡ßç‡¶£ ‡¶Ö‡¶®‡¶≤‡¶æ‡¶á‡¶®! {NUM_COLLECTOR_WORKERS} ‡¶ú‡¶® ‡¶ï‡¶∞‡ßç‡¶Æ‡ßÄ OTP ‡¶∏‡¶Ç‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡¶õ‡ßá‡•§</b>", ADMIN_USER_ID)

    collector_thread.join()

if __name__ == "__main__":
    keep_alive()
    main_bot_thread = Thread(target=start_bot)
    main_bot_thread.start()
