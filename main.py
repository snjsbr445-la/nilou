# ‡¶è‡¶ü‡¶ø main.py ‡¶´‡¶æ‡¶á‡¶≤‡ßá ‡¶•‡¶æ‡¶ï‡¶¨‡ßá

from keep_alive import keep_alive
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from threading import Thread
from queue import Queue
import time
import logging
import traceback
import requests
import html
import re
from datetime import datetime
import pytz
import os

# --- ‡¶¨‡ßç‡¶Ø‡¶ï‡ßç‡¶§‡¶ø‡¶ó‡¶§ ‡¶§‡¶•‡ßç‡¶Ø (‡¶™‡¶∞‡¶ø‡¶¨‡ßá‡¶∂‡¶ó‡¶§ ‡¶≠‡ßá‡¶∞‡¶ø‡¶Ø‡¶º‡ßá‡¶¨‡¶≤ ‡¶•‡ßá‡¶ï‡ßá ‡¶®‡ßá‡¶ì‡ßü‡¶æ ‡¶π‡¶¨‡ßá) ---
# ‡¶è‡¶ü‡¶ø ‡¶Ö‡¶®‡ßá‡¶ï ‡¶¨‡ßá‡¶∂‡¶ø ‡¶®‡¶ø‡¶∞‡¶æ‡¶™‡¶¶ ‡¶è‡¶¨‡¶Ç ‡¶∏‡ßá‡¶∞‡¶æ ‡¶Ö‡¶≠‡ßç‡¶Ø‡¶æ‡¶∏
IVASMS_EMAIL = os.environ.get('IVASMS_EMAIL')
IVASMS_PASSWORD = os.environ.get('IVASMS_PASSWORD')
TELEGRAM_TOKEN = os.environ.get('TELEGRAM_TOKEN')
TELEGRAM_CHAT_ID = os.environ.get('TELEGRAM_CHAT_ID')
ADMIN_USER_ID = os.environ.get('ADMIN_USER_ID')

# --- ‡¶≤‡¶ó‡¶ø‡¶Ç ‡¶ï‡¶®‡¶´‡¶ø‡¶ó‡¶æ‡¶∞‡ßá‡¶∂‡¶® (‡¶∏‡¶†‡¶ø‡¶ï ‡¶™‡¶¶‡ßç‡¶ß‡¶§‡¶ø) ---
# Render-‡¶è‡¶∞ ‡¶™‡¶∞‡¶ø‡¶¨‡ßá‡¶∂‡¶ó‡¶§ ‡¶≠‡ßá‡¶∞‡¶ø‡¶Ø‡¶º‡ßá‡¶¨‡¶≤ ‡¶•‡ßá‡¶ï‡ßá ‡¶≤‡¶ó ‡¶≤‡ßá‡¶≠‡ßá‡¶≤ ‡¶®‡ßá‡¶ì‡ßü‡¶æ ‡¶π‡¶¨‡ßá‡•§ ‡¶°‡¶ø‡¶´‡¶≤‡ßç‡¶ü WARNING ‡¶•‡¶æ‡¶ï‡¶¨‡ßá‡•§
log_level = os.environ.get('LOG_LEVEL', 'WARNING').upper()
logging.basicConfig(level=log_level, format="%(asctime)s - %(levelname)s - %(message)s")

otp_queue = Queue()

def send_to_telegram(message, chat_id):
    if not chat_id:
        logging.error("Telegram chat_id ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø‡•§ ‡¶¨‡¶æ‡¶∞‡ßç‡¶§‡¶æ ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶∏‡¶Æ‡ßç‡¶≠‡¶¨ ‡¶®‡ßü‡•§")
        return
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
    payload = {"chat_id": chat_id, "text": message, "parse_mode": "HTML", "disable_web_page_preview": True}
    try:
        response = requests.post(url, json=payload, timeout=10)
        if response.status_code != 200:
            logging.error(f"‡¶ü‡ßá‡¶≤‡¶ø‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ‡ßá ‡¶¨‡¶æ‡¶∞‡ßç‡¶§‡¶æ ‡¶™‡¶æ‡¶†‡¶æ‡¶§‡ßá ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶• (Status Code: {response.status_code}): {response.text}")
    except Exception as e:
        logging.error(f"‡¶ü‡ßá‡¶≤‡¶ø‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ‡ßá ‡¶¨‡¶æ‡¶∞‡ßç‡¶§‡¶æ ‡¶™‡¶æ‡¶†‡¶æ‡¶§‡ßá ‡¶ó‡¶ø‡ßü‡ßá ‡¶®‡ßá‡¶ü‡¶ì‡ßü‡¶æ‡¶∞‡ßç‡¶ï ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ: {e}")

def create_driver():
    chrome_options = Options()
    chrome_options.add_argument("--headless")
    chrome_options.add_argument("--no-sandbox")
    chrome_options.add_argument("--disable-dev-shm-usage")
    driver = webdriver.Chrome(options=chrome_options)
    return driver

def otp_collector(driver, sent_messages):
    logging.info("‚úÖ OTP ‡¶∏‡¶Ç‡¶ó‡ßç‡¶∞‡¶π‡¶ï‡¶æ‡¶∞‡ßÄ ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§") # ‡¶è‡¶ü‡¶ø ‡¶Ü‡¶∞ ‡¶≤‡¶ó‡ßá ‡¶¶‡ßá‡¶ñ‡¶æ‡¶¨‡ßá ‡¶®‡¶æ
    while True:
        try:
            all_rows = driver.find_elements(By.CSS_SELECTOR, "tbody > tr")
            for row in reversed(all_rows):
                try:
                    cells = row.find_elements(By.TAG_NAME, "td")
                    if len(cells) >= 5:
                        message_content = cells[4].text.strip()
                        if message_content and message_content not in sent_messages:
                            sent_messages.add(message_content)
                            logging.warning(f"‡¶®‡¶§‡ßÅ‡¶® OTP ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶ó‡ßá‡¶õ‡ßá: {message_content}") # ‡¶è‡¶ü‡¶ø WARNING ‡¶π‡¶ø‡¶∏‡ßá‡¶¨‡ßá ‡¶¶‡ßá‡¶ñ‡¶æ‡¶¨‡ßá
                            number_details = cells[0].text.strip().split('\n')
                            number = number_details[1] if len(number_details) > 1 else "N/A"
                            service_name = cells[1].text.strip()
                            otp_queue.put({"number": number, "service": service_name, "message": message_content})
                except Exception:
                    continue
        except Exception as e:
            logging.error(f"OTP ‡¶∏‡¶Ç‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡¶§‡ßá ‡¶ó‡¶ø‡ßü‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ: {e}")
            try:
                if "login" in driver.current_url:
                    logging.critical("iVASMS ‡¶∏‡ßá‡¶∂‡¶® ‡¶∂‡ßá‡¶∑‡•§ ‡¶¨‡¶ü ‡¶¨‡¶®‡ßç‡¶ß ‡¶π‡¶ö‡ßç‡¶õ‡ßá‡•§")
                    os._exit(1)
            except Exception:
                os._exit(1)
        time.sleep(2) # ‡¶ì‡ßü‡ßá‡¶¨‡¶∏‡¶æ‡¶á‡¶ü‡¶ï‡ßá ‡¶Ö‡¶§‡¶ø‡¶∞‡¶ø‡¶ï‡ßç‡¶§ ‡¶ö‡¶æ‡¶™ ‡¶®‡¶æ ‡¶¶‡ßá‡¶ì‡ßü‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶∏‡¶Æ‡ßü ‡ß® ‡¶∏‡ßá‡¶ï‡ßá‡¶®‡ßç‡¶° ‡¶ï‡¶∞‡¶æ ‡¶π‡¶≤‡ßã

def telegram_sender():
    logging.info("‚úÖ ‡¶ü‡ßá‡¶≤‡¶ø‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ ‡¶™‡ßç‡¶∞‡ßá‡¶∞‡¶ï ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§") # ‡¶è‡¶ü‡¶ø‡¶ì ‡¶Ü‡¶∞ ‡¶¶‡ßá‡¶ñ‡¶æ‡¶¨‡ßá ‡¶®‡¶æ
    while True:
        item = otp_queue.get()
        try:
            message_content = item["message"]
            otp_code_match = re.search(r'\b\d{4,8}\b', message_content)
            otp_code = otp_code_match.group(0) if otp_code_match else "N/A"
            tz = pytz.timezone('Asia/Dhaka')
            current_time = datetime.now(tz).strftime('%d/%m/%Y, %I:%M:%S %p')
            escaped_message = html.escape(message_content)
            formatted_msg = (
                f"‚ú® <b>OTP Received</b> ‚ú®\n\n"
                f"‚è∞ <b>Time:</b> {current_time}\n"
                f"üìû <b>Number:</b> <code>{item['number']}</code>\n"
                f"üîß <b>Service:</b> <code>{item['service']}</code>\n"
                f"üîë <b>OTP Code:</b> <code>{otp_code}</code>\n\n"
                f"<blockquote>{escaped_message}</blockquote>"
            )
            send_to_telegram(formatted_msg, TELEGRAM_CHAT_ID)
            logging.warning(f"{item['number']}-‡¶è ‡¶è‡¶ï‡¶ü‡¶ø OTP ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶ü‡ßá‡¶≤‡¶ø‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ‡ßá ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§")
        except Exception as e:
            logging.error(f"‡¶ü‡ßá‡¶≤‡¶ø‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ‡ßá ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶™‡¶æ‡¶†‡¶æ‡¶§‡ßá ‡¶ó‡¶ø‡ßü‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ: {e}")
        finally:
            otp_queue.task_done()

def start_bot():
    driver = None
    try:
        logging.warning("‡¶¨‡¶ü ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶π‡¶ö‡ßç‡¶õ‡ßá...") # ‡¶è‡¶ü‡¶ø WARNING, ‡¶§‡¶æ‡¶á ‡¶≤‡¶ó‡ßá ‡¶¶‡ßá‡¶ñ‡¶æ ‡¶Ø‡¶æ‡¶¨‡ßá
        if not all([IVASMS_EMAIL, IVASMS_PASSWORD, TELEGRAM_TOKEN, TELEGRAM_CHAT_ID, ADMIN_USER_ID]):
             logging.critical("‡¶ó‡ßÅ‡¶∞‡ßÅ‡¶§‡ßç‡¶¨‡¶™‡ßÇ‡¶∞‡ßç‡¶£ ‡¶§‡¶•‡ßç‡¶Ø (Password/Token) ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø‡•§ Environment Variables ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶®‡•§")
             return

        driver = create_driver()
        driver.get("https://www.ivasms.com/login")
        time.sleep(3)
        driver.find_element(By.NAME, "email").send_keys(IVASMS_EMAIL)
        driver.find_element(By.NAME, "password").send_keys(IVASMS_PASSWORD)
        driver.find_element(By.TAG_NAME, "button").click()
        time.sleep(5)
        if "login" in driver.current_url:
            raise Exception("iVASMS-‡¶è ‡¶≤‡¶ó‡¶á‡¶® ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶•‡•§ ‡¶á‡¶Æ‡ßá‡¶≤/‡¶™‡¶æ‡¶∏‡¶ì‡ßü‡¶æ‡¶∞‡ßç‡¶° ‡¶Ö‡¶•‡¶¨‡¶æ ‡¶∏‡¶æ‡¶á‡¶ü ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶π‡ßü‡ßá‡¶õ‡ßá ‡¶ï‡¶ø‡¶®‡¶æ ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶®‡•§")
        logging.warning("‚úÖ iVASMS-‡¶è ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶≤‡¶ó‡¶á‡¶® ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§") # ‡¶è‡¶ü‡¶ø‡¶ì WARNING ‡¶π‡¶ø‡¶∏‡ßá‡¶¨‡ßá ‡¶¶‡ßá‡¶ñ‡¶æ‡¶¨‡ßá

        driver.get("https://www.ivasms.com/portal/live/my_sms")
        logging.warning("üëÄ OTP ‡¶™‡ßá‡¶ú ‡¶™‡¶∞‡ßç‡¶Ø‡¶¨‡ßá‡¶ï‡ßç‡¶∑‡¶£ ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶π‡¶ö‡ßç‡¶õ‡ßá...")
        sent_messages = set()
        collector_thread = Thread(target=otp_collector, args=(driver, sent_messages), daemon=True)
        collector_thread.start()

        for _ in range(5):
            sender_thread = Thread(target=telegram_sender, daemon=True)
            sender_thread.start()

        collector_thread.join()
    except Exception as e:
        error_details = traceback.format_exc()
        # ‡¶è‡¶á ‡¶¶‡ßÅ‡¶ü‡¶ø ‡¶≤‡¶æ‡¶á‡¶® ‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§ ‡¶ï‡¶∞‡¶¨‡ßá ‡¶Ø‡ßá ‡¶ï‡ßç‡¶∞‡ßç‡¶Ø‡¶æ‡¶∂ ‡¶π‡¶≤‡ßá ‡¶Ü‡¶™‡¶®‡¶ø ‡¶ú‡¶æ‡¶®‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶¨‡ßá‡¶®
        logging.critical(f"‡¶¨‡¶ü ‡¶è‡¶ï‡¶ü‡¶ø ‡¶Æ‡¶æ‡¶∞‡¶æ‡¶§‡ßç‡¶Æ‡¶ï ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø‡¶∞ ‡¶ï‡¶æ‡¶∞‡¶£‡ßá ‡¶¨‡¶®‡ßç‡¶ß ‡¶π‡ßü‡ßá ‡¶ó‡ßá‡¶õ‡ßá: {e}\n{error_details}")
        send_to_telegram(f"üêû <b>‡¶¨‡¶ü ‡¶ï‡ßç‡¶∞‡ßç‡¶Ø‡¶æ‡¶∂ ‡¶ï‡¶∞‡ßá‡¶õ‡ßá!</b>\n\n<b>‡¶ï‡¶æ‡¶∞‡¶£:</b>\n<code>{html.escape(str(e))}</code>\n\n<b>‡¶∏‡¶Æ‡ßç‡¶™‡ßÇ‡¶∞‡ßç‡¶£ ‡¶≤‡¶ó ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶®‡•§</b>", ADMIN_USER_ID)
    finally:
        if driver:
            driver.quit()
        logging.warning("‡¶¨‡¶ü ‡¶∏‡¶Æ‡ßç‡¶™‡ßÇ‡¶∞‡ßç‡¶£‡¶≠‡¶æ‡¶¨‡ßá ‡¶¨‡¶®‡ßç‡¶ß‡•§")

if __name__ == "__main__":
    keep_alive()
    main_bot_thread = Thread(target=start_bot)
    main_bot_thread.start()
